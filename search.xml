<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构笔记：线性表.md</title>
      <link href="/2025/06/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
      <url>/2025/06/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="线性表的定义与特点"><a href="#线性表的定义与特点" class="headerlink" title="线性表的定义与特点"></a>线性表的定义与特点</h1><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>由 $n(n\geq 0) $个数据特性相同的元素构成的有限序列，称为线性表。<br>通俗的说：线性表是$n$个数据元素的有限序列，其中$n$个数据是相同数据类型的。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>线性表中元素的个数$n(n\gt0)$定义为线性表的长度，当$n&#x3D;0$时称之为空表<br>对于<code>非空</code>的线性表或线性结构，其特点是:</p><ul><li>存在唯一的一个被称作<code>“第一个”</code>的数据元素;</li><li>存在唯一的一个被称作<code>“最后一个”</code>的数据元素;</li><li>除第一个元素外，结构中的每个数据元素均只有一个前驱:</li><li>除最后一个元素外，结构中的每个数据元素均只有一个后继。</li></ul><h1 id="线性表的顺序表示与实现-顺序表"><a href="#线性表的顺序表示与实现-顺序表" class="headerlink" title="线性表的顺序表示与实现-顺序表"></a>线性表的顺序表示与实现-顺序表</h1><p>用一组连续的内存单元依次存储线性表的各个元素，也就是说，逻辑上相邻的元素，实际的物理存储空间也是连续的。</p><h2 id="顺序表-存储结构"><a href="#顺序表-存储结构" class="headerlink" title="顺序表-存储结构"></a>顺序表-存储结构</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType data[MAXSIZE];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;SeqList;</span><br></pre></td></tr></table></figure><h2 id="顺序表-初始化"><a href="#顺序表-初始化" class="headerlink" title="顺序表-初始化"></a>顺序表-初始化</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType data[MAXSIZE];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">initList</span><span class="params">(SeqList *L)</span></span>&#123;</span><br><span class="line">    L-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顺序表-在尾部添加元素"><a href="#顺序表-在尾部添加元素" class="headerlink" title="顺序表-在尾部添加元素"></a>顺序表-在尾部添加元素</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">appendElem</span><span class="params">(SeqList *L,ElemType e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length&gt;=MAXSIXZE)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;顺序表已满\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;data[L-&gt;length]=e;</span><br><span class="line">    L-&gt;length++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顺序表-遍历"><a href="#顺序表-遍历" class="headerlink" title="顺序表-遍历"></a>顺序表-遍历</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">listElem</span><span class="params">(SqeList *L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L-&gt;length;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,L-&gt;data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="顺序表-插入元素"><a href="#顺序表-插入元素" class="headerlink" title="顺序表-插入元素"></a>顺序表-插入元素</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">insertElem</span><span class="params">(SeqList *L,<span class="type">int</span> pos,ElemType e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;=L-&gt;length)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=L-&gt;length<span class="number">-1</span>;i&gt;=pos<span class="number">-1</span>;i--)&#123;</span><br><span class="line">            L-&gt;data[i<span class="number">+1</span>]=L-&gt;data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        L=data[pos<span class="number">-1</span>]=e;</span><br><span class="line">        L-&gt;length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>顺序表插入数据的最好时间复杂度是O(1)：在倒数第二个位置插入元素<br>顺序表插入数据的最坏时间复杂度是O(n)：在第一个位置插入元素</p></blockquote><h3 id="顺序表-删除元素"><a href="#顺序表-删除元素" class="headerlink" title="顺序表-删除元素"></a>顺序表-删除元素</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">deleteElem</span><span class="params">(SeqList *L, <span class="type">int</span> pos,ElemType *e)</span></span>&#123;</span><br><span class="line">    *e = L-&gt;data[pos<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">if</span>(pos&lt;L-&gt;length)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=pos;i&lt;L-&gt;length;i++)&#123;</span><br><span class="line">            L-&gt;data[i<span class="number">-1</span>]=L-&gt;data[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序表-查找"><a href="#顺序表-查找" class="headerlink" title="顺序表-查找"></a>顺序表-查找</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">findElem</span><span class="params">(SeqList *L,ElemType e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L-&gt;length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(L-&gt;data[i]==e)&#123;</span><br><span class="line">            <span class="keyword">return</span> i<span class="number">+1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序表-动态分配内存地址初始化"><a href="#顺序表-动态分配内存地址初始化" class="headerlink" title="顺序表-动态分配内存地址初始化"></a>顺序表-动态分配内存地址初始化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">    ElemType *data;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line"><span class="function">SeqList* <span class="title">initList</span><span class="params">(SeqList *L)</span></span>&#123;</span><br><span class="line">    SeqList *L=(SeqList*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(SeqList));</span><br><span class="line">    L-&gt;data=(ElemType*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(ElemType) * MAXSIZE);</span><br><span class="line">    L-&gt;length =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线性表的链式表示与实现-链表"><a href="#线性表的链式表示与实现-链表" class="headerlink" title="线性表的链式表示与实现-链表"></a>线性表的链式表示与实现-链表</h1><h1 id="线性表的应用"><a href="#线性表的应用" class="headerlink" title="线性表的应用"></a>线性表的应用</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>瓦:冰箱 猎枭 line up</title>
      <link href="/2025/05/10/%E7%93%A6-%E5%86%B0%E7%AE%B1-%E7%8C%8E%E6%9E%AD-line-up/"/>
      <url>/2025/05/10/%E7%93%A6-%E5%86%B0%E7%AE%B1-%E7%8C%8E%E6%9E%AD-line-up/</url>
      
        <content type="html"><![CDATA[<h1 id="A点进攻"><a href="#A点进攻" class="headerlink" title="A点进攻"></a>A点进攻</h1><h2 id="防前压箭"><a href="#防前压箭" class="headerlink" title="防前压箭"></a>防前压箭</h2><p><img src="https://img-bed.yeyitao.top/%E7%93%A6-%E5%86%B0%E7%AE%B1-%E7%8C%8E%E6%9E%AD-lineup/1.2A%E5%A4%A7%E9%98%B2%E5%89%8D%E5%8E%8B.png" alt="1.2A大防前压" title="1.2A大防前压"></p><h2 id="中路秒杀箭"><a href="#中路秒杀箭" class="headerlink" title="中路秒杀箭"></a>中路秒杀箭</h2><h4 id="站位："><a href="#站位：" class="headerlink" title="站位："></a>站位：</h4><p><img src="https://img-bed.yeyitao.top/%E7%93%A6-%E5%86%B0%E7%AE%B1-%E7%8C%8E%E6%9E%AD-lineup/2.1%E4%B8%AD%E8%B7%AF%E7%A7%92%E6%9D%80%E7%AE%AD%E7%AB%99%E4%BD%8D.png" alt="中路秒杀箭站位" title="中路秒杀箭站位"></p><h4 id="第1箭"><a href="#第1箭" class="headerlink" title="第1箭"></a>第1箭</h4><p><strong>两格一弹：</strong><br><img src="https://img-bed.yeyitao.top/%E7%93%A6-%E5%86%B0%E7%AE%B1-%E7%8C%8E%E6%9E%AD-lineup/2.2%E4%B8%AD%E8%B7%AF%E7%A7%92%E6%9D%80%E7%AE%AD-%E7%AC%AC1%E7%AE%AD.png" alt="中路秒杀箭-第1箭" title="中路秒杀箭-第1箭"></p><h4 id="第2箭"><a href="#第2箭" class="headerlink" title="第2箭"></a>第2箭</h4><p><strong>一格：</strong><br><img src="https://img-bed.yeyitao.top/%E7%93%A6-%E5%86%B0%E7%AE%B1-%E7%8C%8E%E6%9E%AD-lineup/2.3%E4%B8%AD%E8%B7%AF%E7%A7%92%E6%9D%80%E7%AE%AD-%E7%AC%AC2%E7%AE%AD.png" alt="中路秒杀箭-第2箭" title="中路秒杀箭-第2箭"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构笔记：时间复杂度</title>
      <link href="/2025/04/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
      <url>/2025/04/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><pre><code>  算法     +      数据结构      =   程序</code></pre><p> Algorithms + Data Structures &#x3D; Program</p></blockquote><h2 id="算法要满足的5个重要特性"><a href="#算法要满足的5个重要特性" class="headerlink" title="算法要满足的5个重要特性"></a>算法要满足的5个重要特性</h2><ul><li>有穷性</li><li>确定性</li><li>可行性</li><li>输入</li><li>输出</li></ul><h2 id="评价算法优劣的基本标准"><a href="#评价算法优劣的基本标准" class="headerlink" title="评价算法优劣的基本标准"></a>评价算法优劣的基本标准</h2><ul><li>正确性</li><li>可读性</li><li>健壮性</li><li>高效性</li></ul><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>也称渐近时间复杂度，T(n)&#x3D;O(f(n))，随着问题规模 n的增大，算法执行时间和增长率和f(n)增长率成正比。<br>对算法时间复杂度的度量，通常只讨论算法在<strong>最坏情况下</strong>的时间复杂度即<strong>分析在最坏情况下，算法执行时间的上界。</strong></p><h2 id="如何计算时间复杂度"><a href="#如何计算时间复杂度" class="headerlink" title="如何计算时间复杂度"></a>如何计算时间复杂度</h2><h3 id="常量阶示例"><a href="#常量阶示例" class="headerlink" title="常量阶示例"></a>常量阶示例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x++;<span class="comment">//频度为1</span></span><br><span class="line">s =  <span class="number">0</span>; <span class="comment">//频度为1</span></span><br></pre></td></tr></table></figure><p>$$<br>f(n) &#x3D; 1+1&#x3D;2<br>$$<br>及<br>$$T(n) &#x3D;O(1)$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10000</span>;i++)&#123;</span><br><span class="line">    x++;</span><br><span class="line">    s = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然上述代码循环了1w次，但还是属于常数阶，所以：<br>$$T(n) &#x3D;O(1)$$</p><p><strong>实际上，如果算法执行时间不随着n的规模的增长而增长，那么算法当中语句的频度就是某个常数，即使常数再大，算法的时间复杂度都为 O(1)</strong></p><h3 id="线性阶示例"><a href="#线性阶示例" class="headerlink" title="线性阶示例"></a>线性阶示例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;  <span class="comment">//频度为n+1</span></span><br><span class="line">    x++;                <span class="comment">//频度为n</span></span><br><span class="line">    s = <span class="number">0</span>;              <span class="comment">//频度为n</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$$ f(n)&#x3D;(n+1)+n+n&#x3D;3n+1 $$<br>及<br>$$ T(n)&#x3D;O(n) $$</p><h3 id="平方阶示例"><a href="#平方阶示例" class="headerlink" title="平方阶示例"></a>平方阶示例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">0</span>;  <span class="comment">//频度为1</span></span><br><span class="line">y = <span class="number">0</span>;  <span class="comment">//频度为1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;      <span class="comment">//频度为n+1</span></span><br><span class="line">    x++;                    <span class="comment">//频度为n</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;k++)&#123;      <span class="comment">//频度为n+1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;k++)&#123;  <span class="comment">//频度为n*(n+1)</span></span><br><span class="line">        y++;                <span class="comment">//频度为n^2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$$ f(n)&#x3D;1+1+(n+1)+n+(n+1)+n(n+1)+n^2&#x3D;2n^2+4n+4 $$<br>及<br>$$ T(n)&#x3D;O(n^2) $$</p><h3 id="对数阶示例"><a href="#对数阶示例" class="headerlink" title="对数阶示例"></a>对数阶示例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i=i*<span class="number">2</span>)&#123;</span><br><span class="line">    x++;</span><br><span class="line">    s = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过画表得到：</p><table><thead><tr><th>次数</th><th>1</th><th>2</th><th>3</th><th>4</th><th>t</th></tr></thead><tbody><tr><td>i</td><td>1</td><td>2</td><td>4</td><td>8</td><td>?</td></tr><tr><td>i</td><td>$ 2^0$</td><td>$ 2^1$</td><td>$ 2^2$</td><td>$ 2^3$</td><td>$ 2^{t - 1} $</td></tr></tbody></table><p>易得<br>$$<br>\begin{align}<br>    2^{t - 1} &amp;&gt; n \notag\<br>    \log_2{2^{t - 1}} &amp;&gt; \log_2{n} \notag\<br>    t - 1 &amp;&gt; \log_2{n} \notag<br>\end{align}<br>$$<br>及<br>$$<br>\begin{equation}<br>\begin{split}<br>T(n)&amp;&#x3D;\log_2{n}+1 \notag\<br>&amp;&#x3D;O(\log_2{n}) \notag<br>\end{split}<br>\end{equation}<br>$$</p><h3 id="时间复杂度汇总"><a href="#时间复杂度汇总" class="headerlink" title="时间复杂度汇总"></a>时间复杂度汇总</h3><table><thead><tr><th>时间</th><th>名称</th></tr></thead><tbody><tr><td>$1$</td><td>常数阶</td></tr><tr><td>$n$</td><td>线性阶</td></tr><tr><td>$n^2$</td><td>平方阶</td></tr><tr><td>$n^3$</td><td>立方阶</td></tr><tr><td>$\log n$</td><td>对数阶</td></tr><tr><td>$n\log n$</td><td>线性对数阶</td></tr><tr><td>$2^n$</td><td>指数阶</td></tr><tr><td>$n!$</td><td>阶乘阶</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构笔记:前置知识</title>
      <link href="/2025/04/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/"/>
      <url>/2025/04/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>函数</li><li>数组</li><li>字符串</li><li>指针</li><li>内存</li><li>结构体</li></ul><h4 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> 数据类型 别名;</span><br><span class="line"></span><br><span class="line">eg1.</span><br><span class="line">    <span class="keyword">typedef</span> <span class="type">int</span> zx;</span><br><span class="line"></span><br><span class="line">eg2.</span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="type">char</span> b;</span><br><span class="line">        <span class="type">float</span> c;</span><br><span class="line">    &#125;别名;</span><br></pre></td></tr></table></figure><h4 id="内存分类"><a href="#内存分类" class="headerlink" title="内存分类"></a>内存分类</h4><ul><li><p><strong>静态内存</strong><br>静态声明的变量和全局变量使用这部分内存，这些变量在程序开始运行时分配，直到程序终才消失。</p></li><li><p><strong>自动内存(栈内存)</strong><br>函数内部声明的变量使用这部分内存，在函数被调用时才创建。</p></li><li><p><strong>动态内存(堆内存)</strong><br>根据需求编写代码动态分配内存，可以编写代码释放，内存中的内容直到释放才消失。</p><ol><li>使用 <code>malloc(memory allocate)</code> 分配内存<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">malloc</span><span class="params">(<span class="type">size_t</span>)</span></span><br><span class="line">成功-&gt;返回堆内存上分配的内存指针</span><br><span class="line">失败-&gt;返回空指针</span><br></pre></td></tr></table></figure></li><li>使用分配的内存</li><li>使用 <code>free</code> 函数释放内存<br>  <strong>动态内存分配示例</strong>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>基本数据类型</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> <span class="type">const</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="type">int</span> *p;</span><br><span class="line">    p=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    *p = <span class="number">15</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p);</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>字符串类型</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> <span class="type">const</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="type">char</span> *s;</span><br><span class="line">    p=(<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(s,<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,s);</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>数组类型</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> <span class="type">const</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="type">int</span> *arr =(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">5</span> * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        arr[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>结构体类型</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125;po;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> <span class="type">const</span> *argv[])</span>&#123;</span><br><span class="line">    po *p;</span><br><span class="line">    po=(po*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(po));</span><br><span class="line">    p-&gt;x = <span class="number">5</span>;</span><br><span class="line">    p-&gt;y = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p-&gt;x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p-&gt;y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ai对于网安学习路线的回答</title>
      <link href="/2025/04/18/Ai%E5%AF%B9%E4%BA%8E%E7%BD%91%E5%AE%89%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E7%9A%84%E5%9B%9E%E7%AD%94/"/>
      <url>/2025/04/18/Ai%E5%AF%B9%E4%BA%8E%E7%BD%91%E5%AE%89%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E7%9A%84%E5%9B%9E%E7%AD%94/</url>
      
        <content type="html"><![CDATA[<h1 id="Ai对于网安学习路线的回答"><a href="#Ai对于网安学习路线的回答" class="headerlink" title="Ai对于网安学习路线的回答"></a>Ai对于网安学习路线的回答</h1><h1 id="CN-zh：学习路径：从零到网络安全专家"><a href="#CN-zh：学习路径：从零到网络安全专家" class="headerlink" title="CN-zh：学习路径：从零到网络安全专家"></a>CN-zh：学习路径：从零到网络安全专家</h1><p>这份指南将带领你通过从基础到进阶的学习，帮助你从完全的初学者成长为网络安全领域的专家。</p><h2 id="1-计算机基础"><a href="#1-计算机基础" class="headerlink" title="1. 计算机基础"></a>1. <strong>计算机基础</strong></h2><p>   在深入了解网络安全之前，先了解计算机是如何工作的。</p><h3 id="1-1-计算机基础技能"><a href="#1-1-计算机基础技能" class="headerlink" title="1.1 计算机基础技能"></a>1.1 <strong>计算机基础技能</strong></h3><ul><li><strong>什么是计算机？</strong>：了解硬件（CPU、内存、存储设备）和软件（操作系统、应用程序）。</li><li><strong>操作系统基础</strong>：了解操作系统如何工作，重点了解 Windows、macOS 和 Linux。</li><li><strong>文件系统</strong>：了解文件存储、目录结构和权限。</li></ul><h3 id="1-2-计算机体系结构"><a href="#1-2-计算机体系结构" class="headerlink" title="1.2 计算机体系结构"></a>1.2 <strong>计算机体系结构</strong></h3><ul><li><strong>CPU、RAM 和 I&#x2F;O</strong>：了解计算机如何处理数据、管理内存并与外部设备通信。</li><li><strong>数据表示</strong>：了解二进制、十六进制及计算机中的数据表示方式。</li></ul><h3 id="1-3-基础编程"><a href="#1-3-基础编程" class="headerlink" title="1.3 基础编程"></a>1.3 <strong>基础编程</strong></h3><ul><li><strong>编程入门</strong>：学习一种适合初学者的编程语言（如 Python、C 或 JavaScript）。</li><li><strong>变量、数据类型、控制结构</strong>：了解如何使用变量、循环、条件语句和函数。</li><li><strong>基础算法</strong>：学习常见算法（排序、查找等）。</li></ul><h2 id="2-网络基础"><a href="#2-网络基础" class="headerlink" title="2. 网络基础"></a>2. <strong>网络基础</strong></h2><p>   网络安全的根基在于理解网络的运作。开始学习这些基础概念。</p><h3 id="2-1-网络基础概念"><a href="#2-1-网络基础概念" class="headerlink" title="2.1 网络基础概念"></a>2.1 <strong>网络基础概念</strong></h3><ul><li><strong>什么是网络？</strong>：了解不同类型的网络（局域网、广域网等）。</li><li><strong>IP 地址</strong>：学习 IP 地址、子网以及设备如何通过网络通信。</li><li><strong>OSI 模型</strong>：了解 OSI 模型的 7 层及其在网络通信中的作用。</li></ul><h3 id="2-2-协议"><a href="#2-2-协议" class="headerlink" title="2.2 协议"></a>2.2 <strong>协议</strong></h3><ul><li><strong>TCP&#x2F;IP</strong>：学习数据是如何通过互联网传输的（传输控制协议&#x2F;互联网协议）。</li><li><strong>常见网络协议</strong>：了解 HTTP、FTP、DNS、DHCP 等协议。</li><li><strong>端口与套接字</strong>：了解设备如何通过端口进行通信。</li></ul><h3 id="2-3-网络设备与工具"><a href="#2-3-网络设备与工具" class="headerlink" title="2.3 网络设备与工具"></a>2.3 <strong>网络设备与工具</strong></h3><ul><li><strong>路由器、交换机和防火墙</strong>：了解这些关键的网络设备。</li><li><strong>Wireshark 和 Ping</strong>：熟悉常见的网络诊断工具。</li></ul><h2 id="3-网络安全基础"><a href="#3-网络安全基础" class="headerlink" title="3. 网络安全基础"></a>3. <strong>网络安全基础</strong></h2><p>   在深入研究网络安全之前，了解基础的网络安全概念非常重要。</p><h3 id="3-1-什么是网络安全？"><a href="#3-1-什么是网络安全？" class="headerlink" title="3.1 什么是网络安全？"></a>3.1 <strong>什么是网络安全？</strong></h3><ul><li><strong>保密性、完整性与可用性（CIA）</strong>：理解这些网络安全的核心原则。</li><li><strong>常见威胁</strong>：了解恶意软件、勒索软件、钓鱼攻击等。</li><li><strong>身份验证与授权</strong>：了解用户是如何被验证和授予访问权限的。</li></ul><h3 id="3-2-加密技术"><a href="#3-2-加密技术" class="headerlink" title="3.2 加密技术"></a>3.2 <strong>加密技术</strong></h3><ul><li><strong>基本加密</strong>：学习数据如何通过加密保护保密性。</li><li><strong>公钥&#x2F;私钥加密</strong>：了解如何使用非对称加密。</li><li><strong>哈希与签名</strong>：学习哈希如何确保数据的完整性。</li></ul><h3 id="3-3-网络攻击"><a href="#3-3-网络攻击" class="headerlink" title="3.3 网络攻击"></a>3.3 <strong>网络攻击</strong></h3><ul><li><strong>攻击类型</strong>：了解 DDoS、MITM（中间人攻击）、钓鱼攻击、SQL 注入等。</li><li><strong>漏洞</strong>：了解软件漏洞如何被利用（如缓冲区溢出和跨站脚本攻击等）。</li></ul><h2 id="4-网络安全基础"><a href="#4-网络安全基础" class="headerlink" title="4. 网络安全基础"></a>4. <strong>网络安全基础</strong></h2><p>   开始专注于如何保护网络和系统。</p><h3 id="4-1-防火墙与入侵检测系统（IDS）"><a href="#4-1-防火墙与入侵检测系统（IDS）" class="headerlink" title="4.1 防火墙与入侵检测系统（IDS）"></a>4.1 <strong>防火墙与入侵检测系统（IDS）</strong></h3><ul><li><strong>防火墙类型</strong>：了解硬件防火墙和软件防火墙。</li><li><strong>IDS&#x2F;IPS</strong>：了解入侵检测系统和入侵防御系统，它们如何监控网络流量。</li></ul><h3 id="4-2-网络安全协议"><a href="#4-2-网络安全协议" class="headerlink" title="4.2 网络安全协议"></a>4.2 <strong>网络安全协议</strong></h3><ul><li><strong>SSL&#x2F;TLS</strong>：学习这些协议如何保护互联网通信（如 HTTPS）。</li><li><strong>VPN（虚拟私人网络）</strong>：了解 VPN 如何在不安全的网络中保护隐私。</li><li><strong>IPsec</strong>：了解该协议如何保护 IP 通信。</li></ul><h3 id="4-3-访问控制"><a href="#4-3-访问控制" class="headerlink" title="4.3 访问控制"></a>4.3 <strong>访问控制</strong></h3><ul><li><strong>ACL（访问控制列表）</strong>：了解访问控制列表如何限制网络访问。</li><li><strong>身份验证机制</strong>：探索两步验证（2FA）和单点登录（SSO）等方法。</li></ul><h2 id="5-高级网络安全话题"><a href="#5-高级网络安全话题" class="headerlink" title="5. 高级网络安全话题"></a>5. <strong>高级网络安全话题</strong></h2><p>   这些话题将帮助你在保护网络时变得更加专业。</p><h3 id="5-1-网络安全架构"><a href="#5-1-网络安全架构" class="headerlink" title="5.1 网络安全架构"></a>5.1 <strong>网络安全架构</strong></h3><ul><li><strong>DMZ（隔离区）</strong>：了解组织如何为安全性创建隔离的网络区域。</li><li><strong>外围安全</strong>：了解如何保护网络的外部边界。</li></ul><h3 id="5-2-安全监控与事件响应"><a href="#5-2-安全监控与事件响应" class="headerlink" title="5.2 安全监控与事件响应"></a>5.2 <strong>安全监控与事件响应</strong></h3><ul><li><strong>SIEM（安全信息与事件管理）</strong>：了解 SIEM 工具如何监控、检测和响应网络安全事件。</li><li><strong>事件响应</strong>：了解应对安全事件的步骤。</li></ul><h3 id="5-3-高级安全工具"><a href="#5-3-高级安全工具" class="headerlink" title="5.3 高级安全工具"></a>5.3 <strong>高级安全工具</strong></h3><ul><li><strong>渗透测试</strong>：学习道德黑客如何识别网络中的漏洞。</li><li><strong>Metasploit、Nmap、Burp Suite</strong>：实践常见的安全测试工具。</li></ul><h2 id="6-认证与实践经验"><a href="#6-认证与实践经验" class="headerlink" title="6. 认证与实践经验"></a>6. <strong>认证与实践经验</strong></h2><p>   获得认证并积累实践经验对于从事网络安全工作至关重要。</p><h3 id="6-1-认证"><a href="#6-1-认证" class="headerlink" title="6.1 认证"></a>6.1 <strong>认证</strong></h3><ul><li>**CompTIA Security+**：网络安全的基础认证。</li><li><strong>CISSP（认证信息系统安全专家）</strong>：高级网络安全认证。</li><li><strong>CEH（认证道德黑客）</strong>：道德黑客与渗透测试的认证。</li></ul><h3 id="6-2-动手实验"><a href="#6-2-动手实验" class="headerlink" title="6.2 动手实验"></a>6.2 <strong>动手实验</strong></h3><ul><li><strong>虚拟实验平台</strong>：使用 TryHackMe、Hack The Box 或 OverTheWire 等平台进行动手实践。</li><li><strong>建立自己的实验室</strong>：搭建虚拟机（VM），并练习不同的网络安全技术。</li></ul><h3 id="6-3-保持更新"><a href="#6-3-保持更新" class="headerlink" title="6.3 保持更新"></a>6.3 <strong>保持更新</strong></h3><ul><li><strong>关注安全博客和论坛</strong>：订阅像 KrebsOnSecurity、Security Weekly 或 Reddit 的 &#x2F;r&#x2F;netsec 等博客。</li><li><strong>加入在线社区</strong>：通过 Discord、LinkedIn 或专业的安全论坛与其他学习者和专业人士互动。</li></ul><h2 id="7-其他资源"><a href="#7-其他资源" class="headerlink" title="7. 其他资源"></a>7. <strong>其他资源</strong></h2><ul><li><strong>书籍</strong>：<ul><li>《Web应用程序黑客手册》——Dafydd Stuttard 和 Marcus Pinto 著</li><li>《网络安全基础》——William Stallings 著</li></ul></li><li><strong>在线课程</strong>：<ul><li><strong>Coursera</strong>：“网络基础”和“网络安全专门化”</li><li><strong>Udemy</strong>：“完整的网络安全课程：黑客揭秘”</li><li><strong>Pluralsight</strong>：“网络安全基础”</li></ul></li></ul><hr><p>通过按照这个结构化的路径，你将建立一个坚实的计算机、网络和安全基础，最终成为网络安全领域的专家。</p><hr><h1 id="EN-Learning-Path-From-Zero-to-Network-Security-Expert"><a href="#EN-Learning-Path-From-Zero-to-Network-Security-Expert" class="headerlink" title="EN: Learning Path: From Zero to Network Security Expert"></a>EN: Learning Path: From Zero to Network Security Expert</h1><p>This guide will take you through the essential knowledge and skills needed to go from a complete beginner to an advanced understanding of network security.</p><h2 id="1-Fundamentals-of-Computing"><a href="#1-Fundamentals-of-Computing" class="headerlink" title="1. Fundamentals of Computing"></a>1. <strong>Fundamentals of Computing</strong></h2><p>   Before diving into network security, it’s important to understand how computers work.</p><h3 id="1-1-Basic-Computer-Skills"><a href="#1-1-Basic-Computer-Skills" class="headerlink" title="1.1 Basic Computer Skills"></a>1.1 <strong>Basic Computer Skills</strong></h3><ul><li><strong>What is a computer?</strong>: Learn about hardware (CPU, memory, storage devices) and software (operating systems, applications).</li><li><strong>Operating Systems Basics</strong>: Understand how operating systems work, focusing on Windows, macOS, and Linux.</li><li><strong>File Systems</strong>: Learn about file storage, directories, and permissions.</li></ul><h3 id="1-2-Computer-Architecture"><a href="#1-2-Computer-Architecture" class="headerlink" title="1.2 Computer Architecture"></a>1.2 <strong>Computer Architecture</strong></h3><ul><li><strong>CPU, RAM, and I&#x2F;O</strong>: Understand how computers process data, manage memory, and communicate with peripheral devices.</li><li><strong>Data Representation</strong>: Learn about binary, hexadecimal, and how data is represented in computers.</li></ul><h3 id="1-3-Basic-Programming"><a href="#1-3-Basic-Programming" class="headerlink" title="1.3 Basic Programming"></a>1.3 <strong>Basic Programming</strong></h3><ul><li><strong>Introduction to Programming</strong>: Learn a beginner-friendly language (Python, C, or JavaScript).</li><li><strong>Variables, Data Types, Control Structures</strong>: Understand how to use variables, loops, conditionals, and functions.</li><li><strong>Basic Algorithms</strong>: Study common algorithms (sorting, searching, etc.).</li></ul><h2 id="2-Introduction-to-Networking"><a href="#2-Introduction-to-Networking" class="headerlink" title="2. Introduction to Networking"></a>2. <strong>Introduction to Networking</strong></h2><p>   Network security is rooted in understanding how networks operate. Start with these fundamental concepts.</p><h3 id="2-1-Basic-Networking-Concepts"><a href="#2-1-Basic-Networking-Concepts" class="headerlink" title="2.1 Basic Networking Concepts"></a>2.1 <strong>Basic Networking Concepts</strong></h3><ul><li><strong>What is a Network?</strong>: Understand the different types of networks (LAN, WAN, etc.).</li><li><strong>IP Addressing</strong>: Learn about IP addresses, subnets, and how devices communicate over networks.</li><li><strong>OSI Model</strong>: Understand the 7 layers of the OSI model and their roles in network communication.</li></ul><h3 id="2-2-Protocols"><a href="#2-2-Protocols" class="headerlink" title="2.2 Protocols"></a>2.2 <strong>Protocols</strong></h3><ul><li><strong>TCP&#x2F;IP</strong>: Learn how data is transmitted over the internet (Transmission Control Protocol&#x2F;Internet Protocol).</li><li><strong>Common Network Protocols</strong>: Understand HTTP, FTP, DNS, DHCP, etc.</li><li><strong>Ports and Sockets</strong>: Learn how devices use ports to communicate with each other.</li></ul><h3 id="2-3-Network-Devices-and-Tools"><a href="#2-3-Network-Devices-and-Tools" class="headerlink" title="2.3 Network Devices and Tools"></a>2.3 <strong>Network Devices and Tools</strong></h3><ul><li><strong>Routers, Switches, and Firewalls</strong>: Learn about these key devices in networking.</li><li><strong>Wireshark and Ping</strong>: Get familiar with common network diagnostic tools.</li></ul><h2 id="3-Introduction-to-Cybersecurity"><a href="#3-Introduction-to-Cybersecurity" class="headerlink" title="3. Introduction to Cybersecurity"></a>3. <strong>Introduction to Cybersecurity</strong></h2><p>   Before diving into network security, it’s important to understand basic cybersecurity concepts.</p><h3 id="3-1-What-is-Cybersecurity"><a href="#3-1-What-is-Cybersecurity" class="headerlink" title="3.1 What is Cybersecurity?"></a>3.1 <strong>What is Cybersecurity?</strong></h3><ul><li><strong>Confidentiality, Integrity, and Availability (CIA)</strong>: Understand these core principles of cybersecurity.</li><li><strong>Common Threats</strong>: Learn about malware, ransomware, phishing, etc.</li><li><strong>Authentication and Authorization</strong>: Understand how users are verified and granted access to systems.</li></ul><h3 id="3-2-Cryptography"><a href="#3-2-Cryptography" class="headerlink" title="3.2 Cryptography"></a>3.2 <strong>Cryptography</strong></h3><ul><li><strong>Basic Encryption</strong>: Learn how data is encrypted to protect confidentiality.</li><li><strong>Public&#x2F;Private Key Encryption</strong>: Understand how asymmetric encryption works.</li><li><strong>Hashes and Signatures</strong>: Learn how hashes ensure data integrity.</li></ul><h3 id="3-3-Cyber-Attacks"><a href="#3-3-Cyber-Attacks" class="headerlink" title="3.3 Cyber Attacks"></a>3.3 <strong>Cyber Attacks</strong></h3><ul><li><strong>Types of Attacks</strong>: Learn about DDoS, MITM, Phishing, SQL injection, etc.</li><li><strong>Vulnerabilities</strong>: Understand how software vulnerabilities like buffer overflows and XSS can be exploited.</li></ul><h2 id="4-Foundations-of-Network-Security"><a href="#4-Foundations-of-Network-Security" class="headerlink" title="4. Foundations of Network Security"></a>4. <strong>Foundations of Network Security</strong></h2><p>   Now, start focusing on securing networks and systems.</p><h3 id="4-1-Firewalls-and-Intrusion-Detection-Systems-IDS"><a href="#4-1-Firewalls-and-Intrusion-Detection-Systems-IDS" class="headerlink" title="4.1 Firewalls and Intrusion Detection Systems (IDS)"></a>4.1 <strong>Firewalls and Intrusion Detection Systems (IDS)</strong></h3><ul><li><strong>Types of Firewalls</strong>: Learn about hardware and software firewalls.</li><li><strong>IDS&#x2F;IPS</strong>: Understand Intrusion Detection and Prevention Systems and how they monitor network traffic.</li></ul><h3 id="4-2-Network-Security-Protocols"><a href="#4-2-Network-Security-Protocols" class="headerlink" title="4.2 Network Security Protocols"></a>4.2 <strong>Network Security Protocols</strong></h3><ul><li><strong>SSL&#x2F;TLS</strong>: Learn how these protocols secure communications over the internet (e.g., HTTPS).</li><li><strong>VPNs (Virtual Private Networks)</strong>: Understand how VPNs protect privacy over insecure networks.</li><li><strong>IPsec</strong>: Learn how this protocol secures IP communications.</li></ul><h3 id="4-3-Access-Control"><a href="#4-3-Access-Control" class="headerlink" title="4.3 Access Control"></a>4.3 <strong>Access Control</strong></h3><ul><li><strong>ACLs (Access Control Lists)</strong>: Learn how access control lists work to restrict network access.</li><li><strong>Authentication Mechanisms</strong>: Explore methods like two-factor authentication (2FA) and single sign-on (SSO).</li></ul><h2 id="5-Advanced-Network-Security-Topics"><a href="#5-Advanced-Network-Security-Topics" class="headerlink" title="5. Advanced Network Security Topics"></a>5. <strong>Advanced Network Security Topics</strong></h2><p>   These topics will help you become more proficient in securing networks.</p><h3 id="5-1-Network-Security-Architectures"><a href="#5-1-Network-Security-Architectures" class="headerlink" title="5.1 Network Security Architectures"></a>5.1 <strong>Network Security Architectures</strong></h3><ul><li><strong>DMZ (Demilitarized Zone)</strong>: Learn how organizations create isolated network zones for security.</li><li><strong>Perimeter Security</strong>: Understand how to secure the outer boundaries of a network.</li></ul><h3 id="5-2-Security-Monitoring-and-Incident-Response"><a href="#5-2-Security-Monitoring-and-Incident-Response" class="headerlink" title="5.2 Security Monitoring and Incident Response"></a>5.2 <strong>Security Monitoring and Incident Response</strong></h3><ul><li><strong>SIEM (Security Information and Event Management)</strong>: Learn how SIEM tools monitor, detect, and respond to network security events.</li><li><strong>Incident Response</strong>: Understand the steps involved in responding to a security breach.</li></ul><h3 id="5-3-Advanced-Security-Tools"><a href="#5-3-Advanced-Security-Tools" class="headerlink" title="5.3 Advanced Security Tools"></a>5.3 <strong>Advanced Security Tools</strong></h3><ul><li><strong>Penetration Testing</strong>: Learn how ethical hackers identify vulnerabilities in networks.</li><li><strong>Metasploit, Nmap, Burp Suite</strong>: Get hands-on experience with security testing tools.</li></ul><h2 id="6-Certifications-and-Practical-Experience"><a href="#6-Certifications-and-Practical-Experience" class="headerlink" title="6. Certifications and Practical Experience"></a>6. <strong>Certifications and Practical Experience</strong></h2><p>   Earning certifications and gaining practical experience is crucial for a career in network security.</p><h3 id="6-1-Certifications"><a href="#6-1-Certifications" class="headerlink" title="6.1 Certifications"></a>6.1 <strong>Certifications</strong></h3><ul><li><strong>CompTIA Security+</strong>: Good foundational certification for cybersecurity.</li><li><strong>Certified Information Systems Security Professional (CISSP)</strong>: Advanced certification for network security.</li><li><strong>Certified Ethical Hacker (CEH)</strong>: Certification for ethical hacking and penetration testing.</li></ul><h3 id="6-2-Hands-on-Labs"><a href="#6-2-Hands-on-Labs" class="headerlink" title="6.2 Hands-on Labs"></a>6.2 <strong>Hands-on Labs</strong></h3><ul><li><strong>Practice with Virtual Labs</strong>: Use platforms like TryHackMe, Hack The Box, or OverTheWire for hands-on experience.</li><li><strong>Build Your Own Lab</strong>: Set up virtual machines (VMs) and practice different network security techniques.</li></ul><h3 id="6-3-Stay-Updated"><a href="#6-3-Stay-Updated" class="headerlink" title="6.3 Stay Updated"></a>6.3 <strong>Stay Updated</strong></h3><ul><li><strong>Follow Security Blogs and Forums</strong>: Subscribe to blogs like KrebsOnSecurity, Security Weekly, or Reddit’s &#x2F;r&#x2F;netsec.</li><li><strong>Join Online Communities</strong>: Engage with other learners and professionals on Discord, LinkedIn, or specialized security forums.</li></ul><h2 id="7-Additional-Resources"><a href="#7-Additional-Resources" class="headerlink" title="7. Additional Resources"></a>7. <strong>Additional Resources</strong></h2><ul><li><strong>Books</strong>:<ul><li>“The Web Application Hacker’s Handbook” by Dafydd Stuttard and Marcus Pinto</li><li>“Network Security Essentials” by William Stallings</li></ul></li><li><strong>Online Courses</strong>:<ul><li><strong>Coursera</strong>: “Introduction to Networking” and “Cyber Security Specialization”</li><li><strong>Udemy</strong>: “The Complete Cyber Security Course: Hackers Exposed”</li><li><strong>Pluralsight</strong>: “Network Security Fundamentals”</li></ul></li></ul><hr><p>By following this structured path, you’ll build a solid foundation in computers, networking, and security, eventually becoming proficient in securing networks and systems.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2024年总结与2025展望</title>
      <link href="/2025/01/01/2024%E6%80%BB%E7%BB%93%E4%B8%8E2025%E5%B1%95%E6%9C%9B/"/>
      <url>/2025/01/01/2024%E6%80%BB%E7%BB%93%E4%B8%8E2025%E5%B1%95%E6%9C%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="2024年总结与2025展望"><a href="#2024年总结与2025展望" class="headerlink" title="2024年总结与2025展望"></a>2024年总结与2025展望</h1><p>删掉咯 ^ ^</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试文章</title>
      <link href="/2024/12/18/2024%E5%B9%B412%E6%9C%8818%E6%97%A5%20%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2024/12/18/2024%E5%B9%B412%E6%9C%8818%E6%97%A5%20%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>&#x2F;<em>hexo generate hexo deploy</em>&#x2F;</p><blockquote><p>微信公众号排版工具。问题或建议，请公众号留言。**<a href="#jump_8">程序员翻身</a>**</p></blockquote><p>建议使用 <strong>Chrome</strong> 浏览器，体验最佳效果。</p><p>使用微信公众号编辑器有一个十分头疼的问题：粘贴出来的代码，格式错乱，空间小还带行号，而且特别丑。Markdown.com.cn编辑器能够解决这个问题。</p><p>Markdown是一种轻量级的「标记语言」。</p><p>请阅读下方文本熟悉工具使用方法，本文可直接拷贝到微信中预览。</p><h2 id="1-Markdown-com-cn-简介"><a href="#1-Markdown-com-cn-简介" class="headerlink" title="1 Markdown.com.cn 简介"></a>1 Markdown.com.cn 简介</h2><ul><li>支持自定义样式的 Markdown 编辑器</li><li>支持微信公众号、知乎和稀土掘金</li><li>点击右上方对应图标，一键复制到各平台</li></ul><h2 id="2-Markdown语法教程"><a href="#2-Markdown语法教程" class="headerlink" title="2 Markdown语法教程"></a>2 Markdown语法教程</h2><h3 id="2-1-标题"><a href="#2-1-标题" class="headerlink" title="2.1 标题"></a>2.1 标题</h3><p>不同数量的<code>#</code>可以完成不同的标题，如下：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h3 id="2-2-字体"><a href="#2-2-字体" class="headerlink" title="2.2 字体"></a>2.2 字体</h3><p>粗体、斜体、粗体和斜体，删除线，需要在文字前后加不同的标记符号。如下：</p><p><strong>这个是粗体</strong></p><p><em>这个是斜体</em></p><p><em><strong>这个是粗体加斜体</strong></em></p><p>~这里想用删除线~~</p><p>注：如果想给字体换颜色、字体或者居中显示，需要使用内嵌HTML来实现。</p><h3 id="2-3-无序列表"><a href="#2-3-无序列表" class="headerlink" title="2.3 无序列表"></a>2.3 无序列表</h3><p>无序列表的使用，在符号<code>-</code>后加空格使用。如下：</p><ul><li>无序列表 1</li><li>无序列表 2</li><li>无序列表 3</li></ul><p>如果要控制列表的层级，则需要在符号<code>-</code>前使用空格。如下：</p><ul><li>无序列表 1</li><li>无序列表 2<ul><li>无序列表 2.1</li><li>无序列表 2.2</li></ul></li></ul><p><strong>由于微信原因，最多支持到二级列表</strong>。</p><h3 id="2-4-有序列表"><a href="#2-4-有序列表" class="headerlink" title="2.4 有序列表"></a>2.4 有序列表</h3><p>有序列表的使用，在数字及符号<code>.</code>后加空格后输入内容，如下：</p><ol><li>有序列表 1</li><li>有序列表 2</li><li>有序列表 3</li></ol><h3 id="2-5-引用"><a href="#2-5-引用" class="headerlink" title="2.5 引用"></a>2.5 引用</h3><p>引用的格式是在符号<code>&gt;</code>后面书写文字。如下：</p><blockquote><p>读一本好书，就是在和高尚的人谈话。 ——歌德</p></blockquote><blockquote><p>雇用制度对工人不利，但工人根本无力摆脱这个制度。 ——阮一峰</p></blockquote><h3 id="2-7-链接"><a href="#2-7-链接" class="headerlink" title="2.7 链接"></a>2.7 链接</h3><p>微信公众号仅支持公众号文章链接，即域名为<code>https://mp.weixin.qq.com/</code>的合法链接。使用方法如下所示：</p><p>对于该论述，欢迎读者查阅之前发过的文章，<a href="https://mp.weixin.qq.com/s/s5IhxV2ooX3JN_X416nidA">你是《未来世界的幸存者》么？</a><br><a id="jump_8"></a></p><h3 id="2-8-图片"><a href="#2-8-图片" class="headerlink" title="2.8 图片"></a>2.8 图片</h3><p>插入图片，格式如下：</p><p><img src="https://www.nginx.cn/wp-content/uploads/2020/03/qrcode_for_gh_82cf87d482f0_258.jpg" alt="这里写图片描述"></p><p>支持 jpg、png、gif、svg 等图片格式，<strong>其中 svg 文件仅可在微信公众平台中使用</strong>，svg 文件示例如下：</p><p><img src="https://markdown.com.cn/images/i-am-svg.svg"></p><p>支持图片<strong>拖拽和截图粘贴</strong>到编辑器中。</p><p>注：支持图片 <em><strong>拖拽和截图粘贴</strong></em> 到编辑器中，仅支持 https 的图片，图片粘贴到微信时会自动上传微信服务器。</p><h3 id="2-9-分割线"><a href="#2-9-分割线" class="headerlink" title="2.9 分割线"></a>2.9 分割线</h3><p>可以在一行中用三个以上的减号来建立一个分隔线，同时需要在分隔线的上面空一行。如下：</p><hr><h3 id="2-10-表格"><a href="#2-10-表格" class="headerlink" title="2.10 表格"></a>2.10 表格</h3><p>可以使用冒号来定义表格的对齐方式，如下：</p><table><thead><tr><th align="left">姓名</th><th align="center">年龄</th><th align="right">工作</th></tr></thead><tbody><tr><td align="left">小可爱</td><td align="center">18</td><td align="right">吃可爱多</td></tr><tr><td align="left">小小勇敢</td><td align="center">20</td><td align="right">爬棵勇敢树</td></tr><tr><td align="left">小小小机智</td><td align="center">22</td><td align="right">看一本机智书</td></tr></tbody></table><h2 id="3-特殊语法"><a href="#3-特殊语法" class="headerlink" title="3. 特殊语法"></a>3. 特殊语法</h2><h3 id="3-1-脚注"><a href="#3-1-脚注" class="headerlink" title="3.1 脚注"></a>3.1 脚注</h3><blockquote><p>支持平台：微信公众号、知乎。</p></blockquote><p>脚注与链接的区别如下所示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：[<span class="string">文字</span>](<span class="link">链接</span>)</span><br><span class="line">脚注：[<span class="string">文字</span>](<span class="link">脚注解释 &quot;脚注名字&quot;</span>)</span><br></pre></td></tr></table></figure><p>有人认为在<a href="https://en.wikipedia.org/wiki/Front-end_web_development" title="Front-end web development">大前端时代</a>的背景下，移动端开发（Android、IOS）将逐步退出历史舞台。</p><p><a href="%E6%98%AF%E6%8C%87%E6%8E%8C%E6%8F%A1%E5%A4%9A%E7%A7%8D%E6%8A%80%E8%83%BD%EF%BC%8C%E5%B9%B6%E8%83%BD%E5%88%A9%E7%94%A8%E5%A4%9A%E7%A7%8D%E6%8A%80%E8%83%BD%E7%8B%AC%E7%AB%8B%E5%AE%8C%E6%88%90%E4%BA%A7%E5%93%81%E7%9A%84%E4%BA%BA%E3%80%82" title="什么是全栈工程师">全栈工程师</a>在业务开发流程中起到了至关重要的作用。</p><p>脚注内容请拉到最下面观看。</p><h3 id="3-2-代码块"><a href="#3-2-代码块" class="headerlink" title="3.2 代码块"></a>3.2 代码块</h3><blockquote><p>支持平台：微信代码主题仅支持微信公众号！其他主题无限制。</p></blockquote><p>如果在一个行内需要引用代码，只要用反引号引起来就好，如下：</p><p>Use the <code>printf()</code> function.</p><p>在需要高亮的代码块的前一行及后一行使用三个反引号，同时<strong>第一行反引号后面表示代码块所使用的语言</strong>，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FileName: HelloWorld.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">  <span class="comment">// Java 入口程序，程序从此入口</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello,World!&quot;</span>); <span class="comment">// 向控制台打印一条语句</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支持以下语言种类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line">clojure，cpp，cs，css</span><br><span class="line">dart，dockerfile, diff</span><br><span class="line">erlang</span><br><span class="line">go，gradle，groovy</span><br><span class="line">haskell</span><br><span class="line">java，javascript，json，julia</span><br><span class="line">kotlin</span><br><span class="line">lisp，lua</span><br><span class="line">makefile，markdown，matlab</span><br><span class="line">objectivec</span><br><span class="line">perl，php，python</span><br><span class="line">r，ruby，rust</span><br><span class="line">scala，shell，sql，swift</span><br><span class="line">tex，typescript</span><br><span class="line">verilog，vhdl</span><br><span class="line">xml</span><br><span class="line">yaml</span><br></pre></td></tr></table></figure><p>如果想要更换代码高亮样式，可在上方<strong>代码主题</strong>中挑选。</p><p>其中<strong>微信代码主题与微信官方一致</strong>，有以下注意事项：</p><ul><li>带行号且不换行，代码大小与官方一致</li><li>需要在代码块处标志语言，否则无法高亮</li><li>粘贴到公众号后，用鼠标点代码块内外一次，完成高亮</li></ul><p>diff 不能同时和其他语言的高亮同时显示，且需要调整代码主题为微信代码主题以外的代码主题才能看到 diff 效果，使用效果如下:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ 新增项</span></span><br><span class="line"><span class="deletion">- 删除项</span></span><br></pre></td></tr></table></figure><p><strong>其他主题不带行号，可自定义是否换行，代码大小与当前编辑器一致</strong></p><h3 id="3-3-数学公式"><a href="#3-3-数学公式" class="headerlink" title="3.3 数学公式"></a>3.3 数学公式</h3><blockquote><p>支持平台：微信公众号、知乎。</p></blockquote><p>行内公式使用方法，比如这个化学公式：$\ce{Hg^2+ -&gt;[I-] HgI2 -&gt;[I-] [Hg^{II}I4]^2-}$</p><p>块公式使用方法如下：</p><p>$$H(D_2) &#x3D; -\left(\frac{2}{4}\log_2 \frac{2}{4} + \frac{2}{4}\log_2 \frac{2}{4}\right) &#x3D; 1$$</p><p>矩阵：</p><p>$$<br>  \begin{pmatrix}<br>  1 &amp; a_1 &amp; a_1^2 &amp; \cdots &amp; a_1^n \<br>  1 &amp; a_2 &amp; a_2^2 &amp; \cdots &amp; a_2^n \<br>  \vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>  1 &amp; a_m &amp; a_m^2 &amp; \cdots &amp; a_m^n \<br>  \end{pmatrix}<br>$$</p><p>公式由于微信不支持，目前的解决方案是转成 svg 放到微信中，无需调整，矢量不失真。</p><p>目前测试如果公式量过大，在 Chrome 下会存在粘贴后无响应，但是在 Firefox 中始终能够成功。</p><h3 id="3-4-TOC"><a href="#3-4-TOC" class="headerlink" title="3.4 TOC"></a>3.4 TOC</h3><blockquote><p>支持平台：微信公众号、知乎。</p></blockquote><p>TOC 全称为 Table of Content，列出全部标题。</p><p>[TOC]</p><p>由于微信只支持到二级列表，本工具仅支持二级标题和三级标题的显示。</p><h3 id="3-5-注音符号"><a href="#3-5-注音符号" class="headerlink" title="3.5 注音符号"></a>3.5 注音符号</h3><blockquote><p>支持平台：微信公众号。</p></blockquote><p>支持注音符号，用法如下：</p><p>Markdown Nice 这么好用，简直是{喜大普奔|hē hē hē hē}呀！</p><h3 id="3-6-横屏滑动幻灯片"><a href="#3-6-横屏滑动幻灯片" class="headerlink" title="3.6 横屏滑动幻灯片"></a>3.6 横屏滑动幻灯片</h3><blockquote><p>支持平台：微信公众号。</p></blockquote><p>通过<code>&lt;![](url),![](url)&gt;</code>这种语法设置横屏滑动滑动片，具体用法如下：</p><p>&lt;<img src="https://markdown.com.cn/images/blue.jpg" alt="蓝1">,<img src="https://markdown.com.cn/images/green.jpg" alt="绿2">,<img src="https://markdown.com.cn.jpg/" alt="红3">&gt;</p><h2 id="4-其他语法"><a href="#4-其他语法" class="headerlink" title="4 其他语法"></a>4 其他语法</h2><h3 id="4-1-HTML"><a href="#4-1-HTML" class="headerlink" title="4.1 HTML"></a>4.1 HTML</h3><p>支持原生 HTML 语法，请写内联样式，如下：</p><p><span style="display:block;text-align:right;color:orangered;">橙色居右</span><br><span style="display:block;text-align:center;color:orangered;">橙色居中</span></p><h3 id="4-2-UML"><a href="#4-2-UML" class="headerlink" title="4.2 UML"></a>4.2 UML</h3><p>不支持，推荐使用开源工具<code>https://draw.io/</code>制作后再导入图片</p><h2 id="5-致谢"><a href="#5-致谢" class="headerlink" title="5 致谢"></a>5 致谢</h2><ul><li>歌词经理 <a href="https://github.com/lyricat/wechat-format" title="灵感来源">wechat-fromat</a></li><li>颜家大少 <a href="http://md.aclickall.com/" title="MdA2All">MD2All</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>视频</title>
      <link href="/video/index.html"/>
      <url>/video/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
